// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite" // or "postgresql", "mysql" etc.
  url      = env("DATABASE_URL")
}

model SocialMediaHandles {
  id       Int     @id @default(autoincrement())
  facebook String?
  twitter  String?
  linkedin String?
  telegram String?
  whatsapp String?
  owner     User?
}

model User {
  id                 String      @id @default(cuid())
  email              String      @unique
  name               String?
  image              String?
  firstName          String
  middleName         String?
  lastName           String
  username           String      @unique
  role               String      @default("guest")  //Manager,Tenent,Guest,Admin,Staff,Cashier
  phone              String
  password           String
  contactAddress     String
  state              String
  lga                String
  country            String
  height             Float?
  dateOfBirth        DateTime?
  occupation         String?
  aboutMe            String?
  socialMediaHandlesId Int? @unique
  socialMediaHandles SocialMediaHandles?   @relation(fields: [socialMediaHandlesId], references: [id])
  ipAddress          String?
  gps                String?
  deviceInfo         String?
  lastLogin          DateTime?
  apartments         Apartment[]  // Relation to Apartment model
  managedHouses      Building[]  @relation("ManagerHouses")
  bookings    GuestBooking[]
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  Rents              Rent[]
  Payments           Payment[]
}

model Building {
  id          Int        @id @default(autoincrement())
  name        String
  estate     String?
  address     String
  numOfFloors Int
  apartments  Apartment[]
  expenses    Expense[]   // Relation to Expense model
  buildingFeature    BuildingFeature[]
  utility    Utility[]
  managerId   String?
  manager     User?       @relation("ManagerHouses", fields: [managerId], references: [id])
  lawFirmId   Int?
  lawFirm     LawFirm?    @relation(fields: [lawFirmId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model LawFirm {
  id        Int         @id @default(autoincrement())
  name      String
  address   String
  phone     String
  email     String
  buildings Building[]  // Relation to Building model
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Apartment {
  id                Int                @id @default(autoincrement())
  name              String
  cost              Float
  costBy            String
  address           String
  buildingId        Int
  building          Building           @relation(fields: [buildingId], references: [id])
  tenants           User[]             // Implicit many-to-many relation with User model
  expenses          Expense[]          // Relation to Expense model
  bookings    GuestBooking[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  rents             Rent[]
  unitFeatures      UnitFeature[]      // Features related to the apartment unit
  unitPhotos        UnitPhoto[]        // Photos related to the apartment unit
  unitParking       UnitParking[]      // Parking slots related to the apartment unit
  unitPrices        UnitPrice[]        // Pricing details for the apartment unit
  inspections       Inspection[]       // Inspections for the apartment unit
}

model Rent {
  id                Int                @id @default(autoincrement())
  apartmentId       Int
  apartment         Apartment          @relation(fields: [apartmentId], references: [id])
  tenantId          String
  tenant            User               @relation(fields: [tenantId], references: [id])
  startDate         DateTime
  endDate           DateTime
  totalAmount       Float
  payments          Payment[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model Payment {
  id                Int                @id @default(autoincrement())
  rentId            Int
  rent              Rent               @relation(fields: [rentId], references: [id])
  tenantId          String
  tenant            User               @relation(fields: [tenantId], references: [id])
  amountPaid        Float
  paymentId         String
  accountPaidTo     String
  paymentDate       DateTime
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model Expense {
  id                Int                @id @default(autoincrement())
  description       String
  amount            Float
  category          String
  apartmentId       Int?
  apartment         Apartment?         @relation(fields: [apartmentId], references: [id])
  buildingId        Int?
  building          Building?          @relation(fields: [buildingId], references: [id])
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model GuestBooking {
  id                Int                @id @default(autoincrement())
  userId            String
  user              User               @relation(fields: [userId], references: [id])
  apartmentId       Int
  apartment         Apartment          @relation(fields: [apartmentId], references: [id])
  startDate         DateTime
  endDate           DateTime
  bookingStatusId   Int
  bookingStatus     BookingStatus      @relation(fields: [bookingStatusId], references: [id])
  leaseTerm         String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model Utility {
  id                Int                @id @default(autoincrement())
  buildingId        Int
  building          Building           @relation(fields: [buildingId], references: [id])
  utilityTypeId     Int
  utilityType       UtilityType        @relation(fields: [utilityTypeId], references: [id])
  readingDate       DateTime
  meterReading      Float
  amount            Float
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model BuildingFeature {
  id                Int                @id @default(autoincrement())
  buildingId        Int
  building          Building           @relation(fields: [buildingId], references: [id])
  featureId         Int
  feature           Feature            @relation(fields: [featureId], references: [id])
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model UnitFeature {
  id                Int                @id @default(autoincrement())
  apartmentId       Int
  apartment         Apartment          @relation(fields: [apartmentId], references: [id])
  featureId         Int
  feature           Feature            @relation(fields: [featureId], references: [id])
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model Feature {
  id                Int                @id @default(autoincrement())
  feature           String
  buildings         BuildingFeature[]
  apartments        UnitFeature[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model UnitPhoto {
  id                Int                @id @default(autoincrement())
  apartmentId       Int
  apartment         Apartment          @relation(fields: [apartmentId], references: [id])
  photo             String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model UnitParking {
  id                Int                @id @default(autoincrement())
  apartmentId       Int
  apartment         Apartment          @relation(fields: [apartmentId], references: [id])
  parkingSpot       String
  licensePlate      String
  makeModel         String
  color             String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model UnitPrice {
  id                Int                @id @default(autoincrement())
  apartmentId       Int
  apartment         Apartment          @relation(fields: [apartmentId], references: [id])
  price             Float
  fromDate          DateTime
  toDate            DateTime?
  specialPrice      Float?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model Inspection {
  id                Int                @id @default(autoincrement())
  apartmentId       Int
  apartment         Apartment          @relation(fields: [apartmentId], references: [id])
  inspectionTypeId  Int
  inspectionType    InspectionType     @relation(fields: [inspectionTypeId], references: [id])
  inspectionDate    DateTime
  inspectedBy       String
  notes             String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model InspectionType {
  id                Int                @id @default(autoincrement())
  inspectionType    String
  inspections       Inspection[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model UtilityType {
  id                Int                @id @default(autoincrement())
  utilityType       String
  utilities         Utility[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model BookingStatus {
  id                Int                @id @default(autoincrement())
  status            String
  guestBookings     GuestBooking[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}
